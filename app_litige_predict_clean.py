import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier

# Charger les donn√©es
df = pd.read_excel("Base_Litiges_PredictiveAI_ML.xlsx")

# Pr√©paration des donn√©es
X = df.drop(columns=["Litige Probable"])
y = df["Litige Probable"]

# Encodage des colonnes cat√©gorielles
X_encoded = pd.get_dummies(X)

# Entra√Ænement du mod√®le
model = RandomForestClassifier()
model.fit(X_encoded, y)

st.title("üß† Pr√©diction Automatique de Litiges")

st.markdown("Ce formulaire permet de pr√©dire si un nouveau dossier pr√©sente un risque de **litige probable**.")

# Formulaire utilisateur
with st.form("prediction_form"):
    objet = st.text_input("Objet du litige")
    tribunal = st.selectbox("Tribunal", df["Tribunal"].unique())
    demandeur = st.text_input("Demandeur")
    defendeur = st.text_input("D√©fendeur")
    avocat_demandeur = st.selectbox("Avocat Demandeur", df["Avocat Demandeur"].unique())
    avocat_defendeur = st.selectbox("Avocat D√©fendeur", df["Avocat D√©fendeur"].unique())
    date_depot = st.date_input("Date de d√©p√¥t")
    montant_reclame = st.number_input("Montant r√©clam√©", min_value=0.0)
    clause_confidentialite = st.selectbox("Clause de confidentialit√©", ["Oui", "Non"])
    retards = st.selectbox("Retards signal√©s", ["Oui", "Non"])
    mediation = st.selectbox("M√©diation tent√©e", ["Oui", "Non"])
    montant_accorde = st.number_input("Montant accord√©", min_value=0.0)
    president = st.selectbox("Pr√©sident de la chambre", df["Pr√©sident de la chambre"].unique())
    decision = st.selectbox("D√©cision rendue", df["D√©cision rendue"].unique())

    submitted = st.form_submit_button("Pr√©dire le litige")

if submitted:
    new_data = pd.DataFrame({
        "Objet du litige": [objet],
        "Tribunal": [tribunal],
        "Demandeur": [demandeur],
        "D√©fendeur": [defendeur],
        "Avocat Demandeur": [avocat_demandeur],
        "Avocat D√©fendeur": [avocat_defendeur],
        "Date de d√©p√¥t": [date_depot],
        "Montant r√©clam√©": [montant_reclame],
        "Clause de confidentialit√©": [clause_confidentialite],
        "Retards signal√©s": [retards],
        "M√©diation tent√©e": [mediation],
        "Montant accord√©": [montant_accorde],
        "Pr√©sident de la chambre": [president],
        "D√©cision rendue": [decision],
    })

    # Encodage du nouvel exemple pour correspondre aux colonnes d'entra√Ænement
    new_data_encoded = pd.get_dummies(new_data)
    new_data_encoded = new_data_encoded.reindex(columns=X_encoded.columns, fill_value=0)

    prediction = model.predict(new_data_encoded)[0]
    st.subheader("R√©sultat de la pr√©diction :")
    if prediction == "Oui":
        st.error("‚ö†Ô∏è Risque √©lev√© de litige probable")
    else:
        st.success("‚úÖ Litige peu probable")
